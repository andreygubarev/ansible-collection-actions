---
- name: Cilium | configuration
  when: k3s__cilium or k3s_upgrade
  block:
    - name: Cilium | add helm repository
      kubernetes.core.helm_repository:
        name: cilium
        repo_url: https://helm.cilium.io/

    - name: Cilium | get state
      ansible.builtin.shell: >
        KUBECONFIG={{ k3s_path_confdir }}/k3s.yaml
        kubectl -n kube-system get daemonset cilium
      register: cilium_installed
      changed_when: false
      ignore_errors: true

    - name: Cilium | set api server to remote
      when: cilium_installed.rc == 0
      ansible.builtin.set_fact:
        cilium_apiserver: "{{ k3s_apiserver }}"

    - name: Cilium | set api server to local
      when: cilium_installed.rc != 0
      ansible.builtin.set_fact:
        cilium_apiserver: "127.0.0.1"

    - name: Cilium | setup
      kubernetes.core.helm:
        kubeconfig: "{{ k3s_path_confdir }}/k3s.yaml"
        name: cilium
        chart_ref: cilium/cilium
        chart_version: "{{ k3s_version_cilium }}"
        release_namespace: kube-system
        wait: true
        values:
          k8sServiceHost: "{{ cilium_apiserver }}"
          k8sServicePort: 6443

          image:
            useDigest: false
          operator:
            image:
              useDigest: false
            replicas: 1
            rollOutPods: true
          rollOutCiliumPods: true

          loadBalancer:
            serviceTopology: true
          # Following configuration allows using Cilium with Tailscale.
          # When kubeProxyReplacement is enabled, Tailscale connectivity
          # is not stable. Case is described as:
          # https://tailscale.com/kb/1236/kubernetes-operator#cilium-in-kube-proxy-replacement-mode
          # Cilium runs in kube-proxy replacement mode with the socket load balancing in Pods' namespaces enabled,
          # connections from Pods to ClusterIPs go over a TCP socket (instead of going out via Pods' veth devices)
          # and thus bypasses Tailscale firewall rules that are attached to netfilter hooks.
          ipam:
            mode: kubernetes
          kubeProxyReplacement: false

          # at the host network using direct exposure of the Envoy proxy
          # to the host ports (including privileged ports). When traffic
          # arrives at the Serviceâ€™s port, eBPF code intercepts the traffic
          # and transparently forwards it to Envoy.
          nodePort:
            enabled: true
          gatewayAPI:
            enabled: true
            hostNetwork:
              enabled: true
          envoy:
            securityContext:
              capabilities:
                keepCapNetBindService: true
                envoy:
                  - NET_ADMIN
                  - SYS_ADMIN
                  - NET_BIND_SERVICE

    - name: Cilium | wait for readiness
      ansible.builtin.shell: >
        KUBECONFIG={{ k3s_path_confdir }}/k3s.yaml
        kubectl -n kube-system wait --for=condition=ready pod -l app.kubernetes.io/part-of=cilium --timeout=300s
      changed_when: false
