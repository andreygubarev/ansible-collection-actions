---
- name: Register node status
  ansible.builtin.stat:
    path: "{{ kubernetes_service_statedir }}/server/node-token"
  register: kubernetes_node_running

- name: Set node status
  ansible.builtin.set_fact:
    kubernetes_node_running: "{{ kubernetes_node_running.stat.exists }}"

- name: Lookup node external IP
  when: kubernetes_node_external_ip == ""
  block:
    - name: Lookup node external IP internally
      ansible.builtin.set_fact:
        kubernetes_node_external_ip_private: "{{ ansible_default_ipv4.address }}"

    - name: Lookup node external IP externally
      ansible.builtin.uri:
        url: "https://api.ipify.org"
        return_content: yes
      register: kubernetes_node_external_ip_public

    - name: Set node external IP public
      ansible.builtin.set_fact:
        kubernetes_node_external_ip_public: "{{ kubernetes_node_external_ip_public.content }}"

    - name: Set node external IP
      when: kubernetes_node_external_ip_private == kubernetes_node_external_ip_public
      ansible.builtin.set_fact:
        kubernetes_node_external_ip: "{{ kubernetes_node_external_ip_public }}"

- name: Create cluster config
  ansible.builtin.template:
    src: config.yaml.j2
    dest: "{{ kubernetes_service_confdir }}/config.yaml"
    owner: root
    group: root
    mode: 0644
  register: kubernetes_config

- name: Create cluster registries config
  ansible.builtin.template:
    src: registries.yaml.j2
    dest: "{{ kubernetes_registry_config }}"
    owner: root
    group: root
    mode: 0644

- name: Create systemd service environment
  ansible.builtin.template:
    src: kubernetes.service.env.j2
    dest: "/etc/systemd/system/{{ kubernetes_service_name }}.service.env"
    owner: root
    group: root
    mode: 0644
  register: kubernetes_service_env

- name: Create systemd service
  ansible.builtin.template:
    src: kubernetes.service.j2
    dest: "/etc/systemd/system/{{ kubernetes_service_name }}.service"
    owner: root
    group: root
    mode: 0644
  register: kubernetes_service

- name: Set systemd service state based on k3s_config
  ansible.builtin.set_fact:
    kubernetes_service_state: "{{ 'restarted' if kubernetes_config.changed or kubernetes_service.changed or kubernetes_service_env.changed or kubernetes_binary.changed else 'started' }}"

- name: Ensure service is started and enabled
  ansible.builtin.systemd:
    daemon_reload: true
    name: "{{ kubernetes_service_name }}"
    state: "{{ kubernetes_service_state }}"
    enabled: "{{ kubernetes_service_enabled }}"

- name: Wait for cluster to be ready
  ansible.builtin.wait_for:
    path: "{{ kubernetes_service_statedir }}/{{ kubernetes_node_role }}"

- name: Set node status
  ansible.builtin.set_fact:
    kubernetes_node_running: true
