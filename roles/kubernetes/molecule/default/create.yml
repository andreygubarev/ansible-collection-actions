---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Create VMs
      ansible.builtin.command: >
        vagrant up
        --provider {{ lookup('ansible.builtin.env', 'VAGRANT_DEFAULT_PROVIDER', default='virtualbox') }}
        {{ item.name }}
      loop: "{{ molecule_yml.platforms }}"
      changed_when: false

    - name: Read VMs SSH configuration
      ansible.builtin.shell: |
        set -o pipefail
        vagrant ssh {{ item.name }} -c "hostname -I | awk '{ print $1 }'"
        vagrant ssh-config {{ item.name }} | grep IdentityFile | awk '{ print $2 }'
      changed_when: true
      register: servers
      loop: "{{ molecule_yml.platforms }}"

    - name: Wait for instances to be ready
      ansible.builtin.wait_for:
        host: "{{ item.stdout_lines[0] | trim }}"
        port: 22
        delay: 5
        timeout: 60
      loop: "{{ servers.results }}"

    - name: Create instance config
      when: servers.changed | default(false) | bool # noqa no-handler
      block:
        - name: Populate instance config dict # noqa jinja
          ansible.builtin.set_fact:
            instance_conf_dict:
              "instance": "{{ item.item.name }}"
              "address": "{{ item.stdout_lines[0] | trim }}"
              "port": "22"
              "user": "vagrant"
              "identity_file": "{{ item.stdout_lines[1] | trim }}"
          with_items: "{{ servers.results }}"
          register: instance_config_dict

        - name: Convert instance config dict to a list
          ansible.builtin.set_fact:
            instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"

        - name: Dump instance config
          ansible.builtin.copy:
            content: |
              # Molecule managed

              {{ instance_conf | to_json | from_json | to_yaml }}
            dest: "{{ molecule_instance_config }}"
            mode: "0600"
